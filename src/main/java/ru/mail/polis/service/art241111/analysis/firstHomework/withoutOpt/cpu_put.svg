<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (655 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (14 samples, 2.14%)</title><rect x="10.0" y="915.0" width="25.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (14 samples, 2.14%)</title><rect x="10.0" y="899.0" width="25.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (14 samples, 2.14%)</title><rect x="10.0" y="883.0" width="25.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="894.0">j..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (14 samples, 2.14%)</title><rect x="10.0" y="867.0" width="25.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="878.0">s..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (14 samples, 2.14%)</title><rect x="10.0" y="851.0" width="25.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="862.0">j..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$90/208093866.run (14 samples, 2.14%)</title><rect x="10.0" y="835.0" width="25.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="846.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (14 samples, 2.14%)</title><rect x="10.0" y="819.0" width="25.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="830.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (14 samples, 2.14%)</title><rect x="10.0" y="803.0" width="25.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="814.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (14 samples, 2.14%)</title><rect x="10.0" y="787.0" width="25.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="798.0">s..</text>
</g>
<g>
<title>java/io/FilterInputStream.read (1 samples, 0.15%)</title><rect x="10.0" y="771.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (1 samples, 0.15%)</title><rect x="10.0" y="755.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (1 samples, 0.15%)</title><rect x="10.0" y="739.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (1 samples, 0.15%)</title><rect x="10.0" y="723.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (1 samples, 0.15%)</title><rect x="10.0" y="707.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (13 samples, 1.98%)</title><rect x="11.8" y="771.0" width="23.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.8" y="782.0">s..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (13 samples, 1.98%)</title><rect x="11.8" y="755.0" width="23.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.8" y="766.0">j..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (13 samples, 1.98%)</title><rect x="11.8" y="739.0" width="23.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="14.8" y="750.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (13 samples, 1.98%)</title><rect x="11.8" y="723.0" width="23.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.8" y="734.0">s..</text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (13 samples, 1.98%)</title><rect x="11.8" y="707.0" width="23.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.8" y="718.0">s..</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (5 samples, 0.76%)</title><rect x="11.8" y="691.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.8" y="702.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (5 samples, 0.76%)</title><rect x="11.8" y="675.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.8" y="686.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor38.invoke (5 samples, 0.76%)</title><rect x="11.8" y="659.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.8" y="670.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (5 samples, 0.76%)</title><rect x="11.8" y="643.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.8" y="654.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (5 samples, 0.76%)</title><rect x="11.8" y="627.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.8" y="638.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (5 samples, 0.76%)</title><rect x="11.8" y="611.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.8" y="622.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (5 samples, 0.76%)</title><rect x="11.8" y="595.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.8" y="606.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (5 samples, 0.76%)</title><rect x="11.8" y="579.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.8" y="590.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (5 samples, 0.76%)</title><rect x="11.8" y="563.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="14.8" y="574.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (5 samples, 0.76%)</title><rect x="11.8" y="547.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.8" y="558.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (5 samples, 0.76%)</title><rect x="11.8" y="531.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.8" y="542.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (5 samples, 0.76%)</title><rect x="11.8" y="515.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.8" y="526.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (5 samples, 0.76%)</title><rect x="11.8" y="499.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.8" y="510.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (5 samples, 0.76%)</title><rect x="11.8" y="483.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.8" y="494.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (5 samples, 0.76%)</title><rect x="11.8" y="467.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.8" y="478.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (5 samples, 0.76%)</title><rect x="11.8" y="451.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.8" y="462.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (5 samples, 0.76%)</title><rect x="11.8" y="435.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="14.8" y="446.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (3 samples, 0.46%)</title><rect x="11.8" y="419.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.8" y="430.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (3 samples, 0.46%)</title><rect x="11.8" y="403.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.8" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (3 samples, 0.46%)</title><rect x="11.8" y="387.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="14.8" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (3 samples, 0.46%)</title><rect x="11.8" y="371.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.8" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1 samples, 0.15%)</title><rect x="11.8" y="355.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.8" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (1 samples, 0.15%)</title><rect x="11.8" y="339.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="14.8" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1 samples, 0.15%)</title><rect x="11.8" y="323.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="14.8" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (1 samples, 0.15%)</title><rect x="11.8" y="307.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.8" y="318.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.15%)</title><rect x="11.8" y="291.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="14.8" y="302.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (1 samples, 0.15%)</title><rect x="11.8" y="275.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="14.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.15%)</title><rect x="11.8" y="259.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.8" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.15%)</title><rect x="13.6" y="355.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="366.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.15%)</title><rect x="15.4" y="355.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="366.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (1 samples, 0.15%)</title><rect x="15.4" y="339.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.4" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.15%)</title><rect x="15.4" y="323.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (1 samples, 0.15%)</title><rect x="15.4" y="307.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (1 samples, 0.15%)</title><rect x="15.4" y="291.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.4" y="302.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (2 samples, 0.31%)</title><rect x="17.2" y="419.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.2" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.31%)</title><rect x="17.2" y="403.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.2" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.31%)</title><rect x="17.2" y="387.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.2" y="398.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (2 samples, 0.31%)</title><rect x="17.2" y="371.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.2" y="382.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (2 samples, 0.31%)</title><rect x="17.2" y="355.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.2" y="366.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.31%)</title><rect x="17.2" y="339.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.2" y="350.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.31%)</title><rect x="17.2" y="323.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.2" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (2 samples, 0.31%)</title><rect x="17.2" y="307.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.2" y="318.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (2 samples, 0.31%)</title><rect x="17.2" y="291.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.2" y="302.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (2 samples, 0.31%)</title><rect x="17.2" y="275.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.2" y="286.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.15%)</title><rect x="17.2" y="259.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.2" y="270.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.15%)</title><rect x="19.0" y="259.0" width="1.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="22.0" y="270.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="19.0" y="243.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="22.0" y="254.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.15%)</title><rect x="19.0" y="227.0" width="1.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="22.0" y="238.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.15%)</title><rect x="19.0" y="211.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="22.0" y="222.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.15%)</title><rect x="19.0" y="195.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="22.0" y="206.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.15%)</title><rect x="19.0" y="179.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="22.0" y="190.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.15%)</title><rect x="19.0" y="163.0" width="1.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="22.0" y="174.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.15%)</title><rect x="19.0" y="147.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="22.0" y="158.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.15%)</title><rect x="19.0" y="131.0" width="1.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="22.0" y="142.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (4 samples, 0.61%)</title><rect x="20.8" y="691.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.8" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (4 samples, 0.61%)</title><rect x="20.8" y="675.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.8" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (4 samples, 0.61%)</title><rect x="20.8" y="659.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.8" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode (1 samples, 0.15%)</title><rect x="20.8" y="643.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.8" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.drain (1 samples, 0.15%)</title><rect x="20.8" y="627.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.8" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeBlockHeader (1 samples, 0.15%)</title><rect x="20.8" y="611.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.8" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.15%)</title><rect x="20.8" y="595.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.8" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2 samples, 0.31%)</title><rect x="22.6" y="643.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.6" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.15%)</title><rect x="22.6" y="627.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.6" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.15%)</title><rect x="22.6" y="611.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.6" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.writeNonProxy (1 samples, 0.15%)</title><rect x="22.6" y="595.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.6" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeUTF (1 samples, 0.15%)</title><rect x="22.6" y="579.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.6" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeUTF (1 samples, 0.15%)</title><rect x="22.6" y="563.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.6" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.getUTFLength (1 samples, 0.15%)</title><rect x="22.6" y="547.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.6" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.15%)</title><rect x="24.4" y="627.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.4" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.15%)</title><rect x="24.4" y="611.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.4" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.15%)</title><rect x="24.4" y="595.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.4" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.15%)</title><rect x="24.4" y="579.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.4" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.15%)</title><rect x="24.4" y="563.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.4" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.15%)</title><rect x="24.4" y="547.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.4" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.15%)</title><rect x="24.4" y="531.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.4" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (1 samples, 0.15%)</title><rect x="24.4" y="515.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.4" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.15%)</title><rect x="24.4" y="499.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.4" y="510.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.15%)</title><rect x="24.4" y="483.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.4" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor22.invoke (1 samples, 0.15%)</title><rect x="24.4" y="467.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.4" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (1 samples, 0.15%)</title><rect x="24.4" y="451.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.4" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.15%)</title><rect x="24.4" y="435.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.4" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.15%)</title><rect x="24.4" y="419.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.4" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (1 samples, 0.15%)</title><rect x="24.4" y="403.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.4" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeUTF (1 samples, 0.15%)</title><rect x="24.4" y="387.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.4" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeBytes (1 samples, 0.15%)</title><rect x="24.4" y="371.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.4" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.15%)</title><rect x="26.2" y="643.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="29.2" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.15%)</title><rect x="26.2" y="627.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.2" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.15%)</title><rect x="26.2" y="611.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="29.2" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.writeNonProxy (1 samples, 0.15%)</title><rect x="26.2" y="595.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.2" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeLong (1 samples, 0.15%)</title><rect x="26.2" y="579.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.2" y="590.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (1 samples, 0.15%)</title><rect x="28.0" y="691.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.0" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.15%)</title><rect x="28.0" y="675.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.0" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.15%)</title><rect x="28.0" y="659.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.0" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.15%)</title><rect x="28.0" y="643.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.0" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.15%)</title><rect x="28.0" y="627.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.0" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.15%)</title><rect x="28.0" y="611.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.0" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.15%)</title><rect x="28.0" y="595.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.0" y="606.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.resolveClass (1 samples, 0.15%)</title><rect x="28.0" y="579.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="31.0" y="590.0"></text>
</g>
<g>
<title>java/rmi/server/RMIClassLoader.loadClass (1 samples, 0.15%)</title><rect x="28.0" y="563.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.0" y="574.0"></text>
</g>
<g>
<title>java/rmi/server/RMIClassLoader$2.loadClass (1 samples, 0.15%)</title><rect x="28.0" y="547.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.0" y="558.0"></text>
</g>
<g>
<title>sun/rmi/server/LoaderHandler.loadClass (1 samples, 0.15%)</title><rect x="28.0" y="531.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="31.0" y="542.0"></text>
</g>
<g>
<title>sun/rmi/server/LoaderHandler.loadClass (1 samples, 0.15%)</title><rect x="28.0" y="515.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Class.forName (1 samples, 0.15%)</title><rect x="28.0" y="499.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.0" y="510.0"></text>
</g>
<g>
<title>java/lang/Class.forName0 (1 samples, 0.15%)</title><rect x="28.0" y="483.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.0" y="494.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.15%)</title><rect x="28.0" y="467.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="31.0" y="478.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.15%)</title><rect x="28.0" y="451.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="31.0" y="462.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.15%)</title><rect x="28.0" y="435.0" width="1.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="31.0" y="446.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.15%)</title><rect x="28.0" y="419.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="31.0" y="430.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.15%)</title><rect x="28.0" y="403.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="31.0" y="414.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.15%)</title><rect x="28.0" y="387.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="31.0" y="398.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (2 samples, 0.31%)</title><rect x="29.8" y="691.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.8" y="702.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (2 samples, 0.31%)</title><rect x="29.8" y="675.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="32.8" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (2 samples, 0.31%)</title><rect x="29.8" y="659.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.8" y="670.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (2 samples, 0.31%)</title><rect x="29.8" y="643.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.8" y="654.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (2 samples, 0.31%)</title><rect x="29.8" y="627.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.8" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (2 samples, 0.31%)</title><rect x="29.8" y="611.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.8" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (1 samples, 0.15%)</title><rect x="29.8" y="595.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.8" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$ReplaceTable.&lt;init&gt; (1 samples, 0.15%)</title><rect x="31.6" y="595.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="34.6" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.&lt;init&gt; (1 samples, 0.15%)</title><rect x="31.6" y="579.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.6" y="590.0"></text>
</g>
<g>
<title>Runtime1::new_object_array(JavaThread*, Klass*, int) (1 samples, 0.15%)</title><rect x="31.6" y="563.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="34.6" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.15%)</title><rect x="31.6" y="547.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="34.6" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.releaseOutputStream (1 samples, 0.15%)</title><rect x="33.4" y="691.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.4" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.flush (1 samples, 0.15%)</title><rect x="33.4" y="675.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.4" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.flush (1 samples, 0.15%)</title><rect x="33.4" y="659.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.4" y="670.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.15%)</title><rect x="33.4" y="643.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="36.4" y="654.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.15%)</title><rect x="33.4" y="627.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.4" y="638.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (1 samples, 0.15%)</title><rect x="33.4" y="611.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.4" y="622.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (1 samples, 0.15%)</title><rect x="33.4" y="595.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.4" y="606.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (1 samples, 0.15%)</title><rect x="33.4" y="579.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.4" y="590.0"></text>
</g>
<g>
<title>__send (1 samples, 0.15%)</title><rect x="33.4" y="563.0" width="1.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="36.4" y="574.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="33.4" y="547.0" width="1.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="36.4" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.15%)</title><rect x="33.4" y="531.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="36.4" y="542.0"></text>
</g>
<g>
<title>__x64_sys_sendto (1 samples, 0.15%)</title><rect x="33.4" y="515.0" width="1.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="36.4" y="526.0"></text>
</g>
<g>
<title>__sys_sendto (1 samples, 0.15%)</title><rect x="33.4" y="499.0" width="1.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="36.4" y="510.0"></text>
</g>
<g>
<title>sock_sendmsg (1 samples, 0.15%)</title><rect x="33.4" y="483.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="36.4" y="494.0"></text>
</g>
<g>
<title>inet6_sendmsg (1 samples, 0.15%)</title><rect x="33.4" y="467.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="36.4" y="478.0"></text>
</g>
<g>
<title>tcp_sendmsg (1 samples, 0.15%)</title><rect x="33.4" y="451.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="36.4" y="462.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.15%)</title><rect x="33.4" y="435.0" width="1.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="36.4" y="446.0"></text>
</g>
<g>
<title>tcp_push (1 samples, 0.15%)</title><rect x="33.4" y="419.0" width="1.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="36.4" y="430.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (1 samples, 0.15%)</title><rect x="33.4" y="403.0" width="1.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="36.4" y="414.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.15%)</title><rect x="33.4" y="387.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="36.4" y="398.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (1 samples, 0.15%)</title><rect x="33.4" y="371.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="36.4" y="382.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.15%)</title><rect x="33.4" y="355.0" width="1.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="36.4" y="366.0"></text>
</g>
<g>
<title>__ip_queue_xmit (1 samples, 0.15%)</title><rect x="33.4" y="339.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="36.4" y="350.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.15%)</title><rect x="33.4" y="323.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="36.4" y="334.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.15%)</title><rect x="33.4" y="307.0" width="1.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="36.4" y="318.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.15%)</title><rect x="33.4" y="291.0" width="1.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="36.4" y="302.0"></text>
</g>
<g>
<title>__ip_finish_output (1 samples, 0.15%)</title><rect x="33.4" y="275.0" width="1.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="36.4" y="286.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.15%)</title><rect x="33.4" y="259.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="36.4" y="270.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.15%)</title><rect x="33.4" y="243.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="36.4" y="254.0"></text>
</g>
<g>
<title>do_softirq.part.0 (1 samples, 0.15%)</title><rect x="33.4" y="227.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="36.4" y="238.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.15%)</title><rect x="33.4" y="211.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="36.4" y="222.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.15%)</title><rect x="33.4" y="195.0" width="1.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="36.4" y="206.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.15%)</title><rect x="33.4" y="179.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="36.4" y="190.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.15%)</title><rect x="33.4" y="163.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="36.4" y="174.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.15%)</title><rect x="33.4" y="147.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="36.4" y="158.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.15%)</title><rect x="33.4" y="131.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="36.4" y="142.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.15%)</title><rect x="33.4" y="115.0" width="1.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="36.4" y="126.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.15%)</title><rect x="33.4" y="99.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="36.4" y="110.0"></text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.15%)</title><rect x="33.4" y="83.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="36.4" y="94.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.15%)</title><rect x="33.4" y="67.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="36.4" y="78.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1 samples, 0.15%)</title><rect x="33.4" y="51.0" width="1.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="36.4" y="62.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.15%)</title><rect x="33.4" y="35.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="36.4" y="46.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (525 samples, 80.15%)</title><rect x="35.2" y="915.0" width="945.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="38.2" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (92 samples, 14.05%)</title><rect x="35.2" y="899.0" width="165.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="38.2" y="910.0">one/nio/net/NativeSel..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (90 samples, 13.74%)</title><rect x="38.8" y="883.0" width="162.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.8" y="894.0">one/nio/net/NativeSel..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.15%)</title><rect x="38.8" y="867.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="41.8" y="878.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.46%)</title><rect x="40.6" y="867.0" width="5.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="43.6" y="878.0"></text>
</g>
<g>
<title>epoll_wait (86 samples, 13.13%)</title><rect x="46.0" y="867.0" width="155.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="49.0" y="878.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (84 samples, 12.82%)</title><rect x="49.6" y="851.0" width="151.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="52.6" y="862.0">entry_SYSCALL_64_af..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (1 samples, 0.15%)</title><rect x="49.6" y="835.0" width="1.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="52.6" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (83 samples, 12.67%)</title><rect x="51.4" y="835.0" width="149.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="54.4" y="846.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_epoll_wait (79 samples, 12.06%)</title><rect x="58.6" y="819.0" width="142.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="61.6" y="830.0">__x64_sys_epoll_wait</text>
</g>
<g>
<title>do_epoll_wait (79 samples, 12.06%)</title><rect x="58.6" y="803.0" width="142.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="61.6" y="814.0">do_epoll_wait</text>
</g>
<g>
<title>ep_poll (76 samples, 11.60%)</title><rect x="58.6" y="787.0" width="137.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="61.6" y="798.0">ep_poll</text>
</g>
<g>
<title>_raw_write_lock_irq (1 samples, 0.15%)</title><rect x="67.6" y="771.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="70.6" y="782.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (6 samples, 0.92%)</title><rect x="69.5" y="771.0" width="10.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="72.5" y="782.0"></text>
</g>
<g>
<title>ep_send_events_proc (3 samples, 0.46%)</title><rect x="74.9" y="755.0" width="5.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="77.9" y="766.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (2 samples, 0.31%)</title><rect x="74.9" y="739.0" width="3.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="77.9" y="750.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.31%)</title><rect x="74.9" y="723.0" width="3.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="77.9" y="734.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.15%)</title><rect x="74.9" y="707.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="77.9" y="718.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.15%)</title><rect x="76.7" y="707.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="79.7" y="718.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.15%)</title><rect x="78.5" y="739.0" width="1.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="81.5" y="750.0"></text>
</g>
<g>
<title>ep_send_events_proc (1 samples, 0.15%)</title><rect x="80.3" y="771.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="83.3" y="782.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.15%)</title><rect x="82.1" y="771.0" width="1.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="85.1" y="782.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (62 samples, 9.47%)</title><rect x="83.9" y="771.0" width="111.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="86.9" y="782.0">schedule_hrti..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (62 samples, 9.47%)</title><rect x="83.9" y="755.0" width="111.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="86.9" y="766.0">schedule_hrti..</text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.15%)</title><rect x="83.9" y="739.0" width="1.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="86.9" y="750.0"></text>
</g>
<g>
<title>schedule (61 samples, 9.31%)</title><rect x="85.7" y="739.0" width="109.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="88.7" y="750.0">schedule</text>
</g>
<g>
<title>__sched_text_start (61 samples, 9.31%)</title><rect x="85.7" y="723.0" width="109.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="88.7" y="734.0">__sched_text_..</text>
</g>
<g>
<title>finish_task_switch (60 samples, 9.16%)</title><rect x="87.5" y="707.0" width="108.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="90.5" y="718.0">finish_task_s..</text>
</g>
<g>
<title>fput_many (3 samples, 0.46%)</title><rect x="195.6" y="787.0" width="5.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="198.6" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (433 samples, 66.11%)</title><rect x="201.0" y="899.0" width="780.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.0" y="910.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (433 samples, 66.11%)</title><rect x="201.0" y="883.0" width="780.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.0" y="894.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (392 samples, 59.85%)</title><rect x="202.8" y="867.0" width="706.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.8" y="878.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (375 samples, 57.25%)</title><rect x="204.6" y="851.0" width="675.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.6" y="862.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.15%)</title><rect x="204.6" y="835.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.6" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (374 samples, 57.10%)</title><rect x="206.4" y="835.0" width="673.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="209.4" y="846.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (369 samples, 56.34%)</title><rect x="208.2" y="819.0" width="664.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.2" y="830.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (271 samples, 41.37%)</title><rect x="208.2" y="803.0" width="488.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.2" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.92%)</title><rect x="208.2" y="787.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="211.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.92%)</title><rect x="208.2" y="771.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="211.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.92%)</title><rect x="208.2" y="755.0" width="10.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.15%)</title><rect x="210.0" y="739.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="213.0" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.15%)</title><rect x="210.0" y="723.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="213.0" y="734.0"></text>
</g>
<g>
<title>gettimeofday@plt (1 samples, 0.15%)</title><rect x="211.8" y="739.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="214.8" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.46%)</title><rect x="213.6" y="739.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="216.6" y="750.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.46%)</title><rect x="213.6" y="723.0" width="5.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="216.6" y="734.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.31%)</title><rect x="215.4" y="707.0" width="3.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="218.4" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (263 samples, 40.15%)</title><rect x="219.0" y="787.0" width="473.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.0" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.76%)</title><rect x="219.0" y="771.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.0" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.15%)</title><rect x="226.2" y="755.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="229.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.15%)</title><rect x="226.2" y="739.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.15%)</title><rect x="226.2" y="723.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.2" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (258 samples, 39.39%)</title><rect x="228.0" y="771.0" width="464.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.0" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (258 samples, 39.39%)</title><rect x="228.0" y="755.0" width="464.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.0" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (258 samples, 39.39%)</title><rect x="228.0" y="739.0" width="464.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.0" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (257 samples, 39.24%)</title><rect x="229.8" y="723.0" width="463.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.8" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.15%)</title><rect x="229.8" y="707.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="232.8" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.15%)</title><rect x="229.8" y="691.0" width="1.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="232.8" y="702.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.15%)</title><rect x="229.8" y="675.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="232.8" y="686.0"></text>
</g>
<g>
<title>__send (256 samples, 39.08%)</title><rect x="231.6" y="707.0" width="461.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="234.6" y="718.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (253 samples, 38.63%)</title><rect x="237.0" y="691.0" width="455.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="240.0" y="702.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (253 samples, 38.63%)</title><rect x="237.0" y="675.0" width="455.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="240.0" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (252 samples, 38.47%)</title><rect x="237.0" y="659.0" width="454.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="240.0" y="670.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (252 samples, 38.47%)</title><rect x="237.0" y="643.0" width="454.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="240.0" y="654.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (251 samples, 38.32%)</title><rect x="237.0" y="627.0" width="452.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="240.0" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (249 samples, 38.02%)</title><rect x="237.0" y="611.0" width="448.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="240.0" y="622.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (249 samples, 38.02%)</title><rect x="237.0" y="595.0" width="448.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="240.0" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>_cond_resched (2 samples, 0.31%)</title><rect x="237.0" y="579.0" width="3.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="240.0" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.15%)</title><rect x="240.6" y="579.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="243.6" y="590.0"></text>
</g>
<g>
<title>sk_page_frag_refill (1 samples, 0.15%)</title><rect x="242.4" y="579.0" width="1.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="245.4" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (244 samples, 37.25%)</title><rect x="244.2" y="579.0" width="439.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="247.2" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.31%)</title><rect x="246.0" y="563.0" width="3.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="249.0" y="574.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.31%)</title><rect x="246.0" y="547.0" width="3.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="249.0" y="558.0"></text>
</g>
<g>
<title>sk_page_frag_refill (1 samples, 0.15%)</title><rect x="249.6" y="563.0" width="1.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="252.6" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.15%)</title><rect x="249.6" y="547.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="252.6" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (34 samples, 5.19%)</title><rect x="251.4" y="563.0" width="61.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="254.4" y="574.0">sk_str..</text>
</g>
<g>
<title>__alloc_skb (31 samples, 4.73%)</title><rect x="253.2" y="547.0" width="55.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="256.2" y="558.0">__all..</text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.15%)</title><rect x="255.0" y="531.0" width="1.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="258.0" y="542.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (16 samples, 2.44%)</title><rect x="256.8" y="531.0" width="28.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="259.8" y="542.0">__..</text>
</g>
<g>
<title>__kmalloc_node_track_caller (10 samples, 1.53%)</title><rect x="258.6" y="515.0" width="18.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="261.6" y="526.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.31%)</title><rect x="269.4" y="499.0" width="3.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="272.4" y="510.0"></text>
</g>
<g>
<title>kmalloc_slab (2 samples, 0.31%)</title><rect x="273.0" y="499.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="276.0" y="510.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.15%)</title><rect x="276.6" y="515.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="279.6" y="526.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.15%)</title><rect x="278.4" y="515.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="281.4" y="526.0"></text>
</g>
<g>
<title>memset (3 samples, 0.46%)</title><rect x="280.2" y="515.0" width="5.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="283.2" y="526.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (8 samples, 1.22%)</title><rect x="285.6" y="531.0" width="14.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="288.6" y="542.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (2 samples, 0.31%)</title><rect x="300.0" y="531.0" width="3.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="303.0" y="542.0"></text>
</g>
<g>
<title>memset (3 samples, 0.46%)</title><rect x="303.6" y="531.0" width="5.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="306.6" y="542.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (2 samples, 0.31%)</title><rect x="309.1" y="547.0" width="3.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="312.1" y="558.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.15%)</title><rect x="312.7" y="563.0" width="1.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="315.7" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.15%)</title><rect x="314.5" y="563.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="317.5" y="574.0"></text>
</g>
<g>
<title>tcp_push (203 samples, 30.99%)</title><rect x="316.3" y="563.0" width="365.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="319.3" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (203 samples, 30.99%)</title><rect x="316.3" y="547.0" width="365.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="319.3" y="558.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>ktime_get (1 samples, 0.15%)</title><rect x="316.3" y="531.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="319.3" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (202 samples, 30.84%)</title><rect x="318.1" y="531.0" width="363.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="321.1" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (200 samples, 30.53%)</title><rect x="318.1" y="515.0" width="360.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="321.1" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>ip_queue_xmit (198 samples, 30.23%)</title><rect x="319.9" y="499.0" width="356.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="322.9" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (197 samples, 30.08%)</title><rect x="321.7" y="483.0" width="354.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="324.7" y="494.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (197 samples, 30.08%)</title><rect x="321.7" y="467.0" width="354.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="324.7" y="478.0">ip_local_out</text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.15%)</title><rect x="321.7" y="451.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="324.7" y="462.0"></text>
</g>
<g>
<title>ip_output (196 samples, 29.92%)</title><rect x="323.5" y="451.0" width="353.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="326.5" y="462.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (196 samples, 29.92%)</title><rect x="323.5" y="435.0" width="353.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="326.5" y="446.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.15%)</title><rect x="323.5" y="419.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="326.5" y="430.0"></text>
</g>
<g>
<title>__ip_finish_output (195 samples, 29.77%)</title><rect x="325.3" y="419.0" width="351.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="328.3" y="430.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (195 samples, 29.77%)</title><rect x="325.3" y="403.0" width="351.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="328.3" y="414.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (186 samples, 28.40%)</title><rect x="332.5" y="387.0" width="335.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="335.5" y="398.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.0 (186 samples, 28.40%)</title><rect x="332.5" y="371.0" width="335.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="335.5" y="382.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (186 samples, 28.40%)</title><rect x="332.5" y="355.0" width="335.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="335.5" y="366.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (186 samples, 28.40%)</title><rect x="332.5" y="339.0" width="335.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="335.5" y="350.0">__softirqentry_text_start</text>
</g>
<g>
<title>net_rx_action (185 samples, 28.24%)</title><rect x="334.3" y="323.0" width="333.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="337.3" y="334.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (185 samples, 28.24%)</title><rect x="334.3" y="307.0" width="333.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="337.3" y="318.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (184 samples, 28.09%)</title><rect x="336.1" y="291.0" width="331.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="339.1" y="302.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_one_core (184 samples, 28.09%)</title><rect x="336.1" y="275.0" width="331.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="339.1" y="286.0">__netif_receive_skb_one_core</text>
</g>
<g>
<title>ip_rcv (184 samples, 28.09%)</title><rect x="336.1" y="259.0" width="331.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="339.1" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (183 samples, 27.94%)</title><rect x="337.9" y="243.0" width="329.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="340.9" y="254.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (182 samples, 27.79%)</title><rect x="339.7" y="227.0" width="327.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="342.7" y="238.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (181 samples, 27.63%)</title><rect x="341.5" y="211.0" width="326.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="344.5" y="222.0">ip_local_deliver_finish</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (181 samples, 27.63%)</title><rect x="341.5" y="195.0" width="326.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="344.5" y="206.0">ip_protocol_deliver_rcu</text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.15%)</title><rect x="343.3" y="179.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="346.3" y="190.0"></text>
</g>
<g>
<title>sock_put (1 samples, 0.15%)</title><rect x="345.1" y="179.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="348.1" y="190.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (1 samples, 0.15%)</title><rect x="346.9" y="179.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="349.9" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (177 samples, 27.02%)</title><rect x="348.7" y="179.0" width="318.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="351.7" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.31%)</title><rect x="350.5" y="163.0" width="3.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="353.5" y="174.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.15%)</title><rect x="350.5" y="147.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="353.5" y="158.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (1 samples, 0.15%)</title><rect x="352.3" y="147.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="355.3" y="158.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (174 samples, 26.56%)</title><rect x="354.1" y="163.0" width="313.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="357.1" y="174.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.15%)</title><rect x="355.9" y="147.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="358.9" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (172 samples, 26.26%)</title><rect x="357.7" y="147.0" width="309.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="360.7" y="158.0">tcp_rcv_established</text>
</g>
<g>
<title>tcp_ack (10 samples, 1.53%)</title><rect x="361.3" y="131.0" width="18.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="364.3" y="142.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.31%)</title><rect x="364.9" y="115.0" width="3.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="367.9" y="126.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (6 samples, 0.92%)</title><rect x="368.5" y="115.0" width="10.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="371.5" y="126.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.31%)</title><rect x="372.1" y="99.0" width="3.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="375.1" y="110.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.15%)</title><rect x="372.1" y="83.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="375.1" y="94.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.15%)</title><rect x="372.1" y="67.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="375.1" y="78.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.15%)</title><rect x="373.9" y="83.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="376.9" y="94.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.15%)</title><rect x="373.9" y="67.0" width="1.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="376.9" y="78.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.15%)</title><rect x="375.7" y="99.0" width="1.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="378.7" y="110.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (1 samples, 0.15%)</title><rect x="377.5" y="99.0" width="1.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="380.5" y="110.0"></text>
</g>
<g>
<title>tcp_data_ready (159 samples, 24.27%)</title><rect x="379.3" y="131.0" width="286.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="382.3" y="142.0">tcp_data_ready</text>
</g>
<g>
<title>sock_def_readable (159 samples, 24.27%)</title><rect x="379.3" y="115.0" width="286.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="382.3" y="126.0">sock_def_readable</text>
</g>
<g>
<title>__wake_up_sync_key (159 samples, 24.27%)</title><rect x="379.3" y="99.0" width="286.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="382.3" y="110.0">__wake_up_sync_key</text>
</g>
<g>
<title>__wake_up_common_lock (159 samples, 24.27%)</title><rect x="379.3" y="83.0" width="286.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="382.3" y="94.0">__wake_up_common_lock</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (159 samples, 24.27%)</title><rect x="379.3" y="67.0" width="286.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="382.3" y="78.0">_raw_spin_unlock_irqrestore</text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.15%)</title><rect x="665.8" y="131.0" width="1.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="668.8" y="142.0"></text>
</g>
<g>
<title>dev_queue_xmit (5 samples, 0.76%)</title><rect x="667.6" y="387.0" width="9.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="670.6" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (4 samples, 0.61%)</title><rect x="667.6" y="371.0" width="7.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="670.6" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.31%)</title><rect x="671.2" y="355.0" width="3.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="674.2" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.31%)</title><rect x="671.2" y="339.0" width="3.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="674.2" y="350.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.15%)</title><rect x="671.2" y="323.0" width="1.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="674.2" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.15%)</title><rect x="671.2" y="307.0" width="1.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="674.2" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.15%)</title><rect x="671.2" y="291.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="674.2" y="302.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.15%)</title><rect x="673.0" y="323.0" width="1.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="676.0" y="334.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.15%)</title><rect x="674.8" y="371.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="677.8" y="382.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.15%)</title><rect x="676.6" y="499.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="679.6" y="510.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.15%)</title><rect x="676.6" y="483.0" width="1.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="679.6" y="494.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.15%)</title><rect x="676.6" y="467.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="679.6" y="478.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.15%)</title><rect x="678.4" y="515.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="681.4" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.15%)</title><rect x="680.2" y="515.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="683.2" y="526.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.15%)</title><rect x="680.2" y="499.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="683.2" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.15%)</title><rect x="680.2" y="483.0" width="1.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="683.2" y="494.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.15%)</title><rect x="680.2" y="467.0" width="1.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="683.2" y="478.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.15%)</title><rect x="682.0" y="563.0" width="1.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="685.0" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.15%)</title><rect x="682.0" y="547.0" width="1.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="685.0" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.15%)</title><rect x="682.0" y="531.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="685.0" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.15%)</title><rect x="683.8" y="579.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="686.8" y="590.0"></text>
</g>
<g>
<title>inet_send_prepare (1 samples, 0.15%)</title><rect x="685.6" y="611.0" width="1.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="688.6" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.15%)</title><rect x="687.4" y="611.0" width="1.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="690.4" y="622.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.15%)</title><rect x="687.4" y="595.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="690.4" y="606.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.15%)</title><rect x="687.4" y="579.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="690.4" y="590.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (1 samples, 0.15%)</title><rect x="687.4" y="563.0" width="1.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="690.4" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.15%)</title><rect x="689.2" y="627.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="692.2" y="638.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.15%)</title><rect x="689.2" y="611.0" width="1.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="692.2" y="622.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.15%)</title><rect x="689.2" y="595.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="692.2" y="606.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.15%)</title><rect x="689.2" y="579.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="692.2" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.15%)</title><rect x="691.0" y="659.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="694.0" y="670.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.15%)</title><rect x="691.0" y="643.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="694.0" y="654.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.15%)</title><rect x="691.0" y="627.0" width="1.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="694.0" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.15%)</title><rect x="691.0" y="611.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="694.0" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.31%)</title><rect x="692.8" y="787.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="695.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.15%)</title><rect x="694.6" y="771.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="697.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.15%)</title><rect x="694.6" y="755.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="697.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 0.31%)</title><rect x="696.4" y="803.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="699.4" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.31%)</title><rect x="696.4" y="787.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="699.4" y="798.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.15%)</title><rect x="698.2" y="771.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="701.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.15%)</title><rect x="698.2" y="755.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="701.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.15%)</title><rect x="698.2" y="739.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="701.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.15%)</title><rect x="698.2" y="723.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="701.2" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/art241111/MyHttpServer.entity (96 samples, 14.66%)</title><rect x="700.0" y="803.0" width="172.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="703.0" y="814.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/art241111/handlers/EntityHandler.handlePutRequest (96 samples, 14.66%)</title><rect x="700.0" y="787.0" width="172.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="703.0" y="798.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (83 samples, 12.67%)</title><rect x="700.0" y="771.0" width="149.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="703.0" y="782.0">ch/qos/logback/clas..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (83 samples, 12.67%)</title><rect x="700.0" y="755.0" width="149.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="703.0" y="766.0">ch/qos/logback/clas..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (81 samples, 12.37%)</title><rect x="700.0" y="739.0" width="145.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="703.0" y="750.0">ch/qos/logback/cla..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (81 samples, 12.37%)</title><rect x="700.0" y="723.0" width="145.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="703.0" y="734.0">ch/qos/logback/cla..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (80 samples, 12.21%)</title><rect x="700.0" y="707.0" width="144.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="703.0" y="718.0">ch/qos/logback/cla..</text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (80 samples, 12.21%)</title><rect x="700.0" y="691.0" width="144.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="703.0" y="702.0">ch/qos/logback/cor..</text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (80 samples, 12.21%)</title><rect x="700.0" y="675.0" width="144.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="703.0" y="686.0">ch/qos/logback/cor..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (80 samples, 12.21%)</title><rect x="700.0" y="659.0" width="144.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="703.0" y="670.0">ch/qos/logback/cor..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (80 samples, 12.21%)</title><rect x="700.0" y="643.0" width="144.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="703.0" y="654.0">ch/qos/logback/cor..</text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (10 samples, 1.53%)</title><rect x="700.0" y="627.0" width="18.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="703.0" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (8 samples, 1.22%)</title><rect x="700.0" y="611.0" width="14.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="703.0" y="622.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (8 samples, 1.22%)</title><rect x="700.0" y="595.0" width="14.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="703.0" y="606.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (8 samples, 1.22%)</title><rect x="700.0" y="579.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="703.0" y="590.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.deeplyAppendParameter (8 samples, 1.22%)</title><rect x="700.0" y="563.0" width="14.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="703.0" y="574.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.safeObjectAppend (8 samples, 1.22%)</title><rect x="700.0" y="547.0" width="14.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="703.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (8 samples, 1.22%)</title><rect x="700.0" y="531.0" width="14.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="703.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Class.getName (4 samples, 0.61%)</title><rect x="700.0" y="515.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="703.0" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.15%)</title><rect x="703.6" y="499.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="706.6" y="510.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.15%)</title><rect x="705.4" y="499.0" width="1.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="708.4" y="510.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (4 samples, 0.61%)</title><rect x="707.2" y="515.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="710.2" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getMDCPropertyMap (2 samples, 0.31%)</title><rect x="714.4" y="611.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="717.4" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getPropertyMap (2 samples, 0.31%)</title><rect x="714.4" y="595.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="717.4" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.write (1 samples, 0.15%)</title><rect x="716.2" y="579.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="719.2" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.writeBytes (67 samples, 10.23%)</title><rect x="718.0" y="627.0" width="120.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="721.0" y="638.0">ch/qos/logback/..</text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.write (67 samples, 10.23%)</title><rect x="718.0" y="611.0" width="120.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="721.0" y="622.0">ch/qos/logback/..</text>
</g>
<g>
<title>java/io/FilterOutputStream.write (67 samples, 10.23%)</title><rect x="718.0" y="595.0" width="120.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="721.0" y="606.0">java/io/FilterO..</text>
</g>
<g>
<title>java/io/PrintStream.write (67 samples, 10.23%)</title><rect x="718.0" y="579.0" width="120.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.0" y="590.0">java/io/PrintSt..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (67 samples, 10.23%)</title><rect x="718.0" y="563.0" width="120.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="721.0" y="574.0">java/io/Buffere..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (67 samples, 10.23%)</title><rect x="718.0" y="547.0" width="120.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="721.0" y="558.0">java/io/FileOut..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (64 samples, 9.77%)</title><rect x="723.4" y="531.0" width="115.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="726.4" y="542.0">java/io/FileOu..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (64 samples, 9.77%)</title><rect x="723.4" y="515.0" width="115.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="726.4" y="526.0">Java_java_io_F..</text>
</g>
<g>
<title>jni_ExceptionOccurred (1 samples, 0.15%)</title><rect x="725.2" y="499.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="728.2" y="510.0"></text>
</g>
<g>
<title>writeBytes (62 samples, 9.47%)</title><rect x="727.0" y="499.0" width="111.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="730.0" y="510.0">writeBytes</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.15%)</title><rect x="730.6" y="483.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="733.6" y="494.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.15%)</title><rect x="732.4" y="483.0" width="1.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="735.4" y="494.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.15%)</title><rect x="732.4" y="467.0" width="1.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="735.4" y="478.0"></text>
</g>
<g>
<title>jni_GetObjectField (2 samples, 0.31%)</title><rect x="734.2" y="483.0" width="3.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="737.2" y="494.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.15%)</title><rect x="734.2" y="467.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="737.2" y="478.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.15%)</title><rect x="736.0" y="467.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="739.0" y="478.0"></text>
</g>
<g>
<title>write (56 samples, 8.55%)</title><rect x="737.8" y="483.0" width="100.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="740.8" y="494.0">write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (56 samples, 8.55%)</title><rect x="737.8" y="467.0" width="100.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="740.8" y="478.0">entry_SYSCAL..</text>
</g>
<g>
<title>do_syscall_64 (56 samples, 8.55%)</title><rect x="737.8" y="451.0" width="100.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="740.8" y="462.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (49 samples, 7.48%)</title><rect x="739.6" y="435.0" width="88.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="742.6" y="446.0">__x64_sys_..</text>
</g>
<g>
<title>ksys_write (49 samples, 7.48%)</title><rect x="739.6" y="419.0" width="88.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="742.6" y="430.0">ksys_write</text>
</g>
<g>
<title>vfs_write (49 samples, 7.48%)</title><rect x="739.6" y="403.0" width="88.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="742.6" y="414.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (48 samples, 7.33%)</title><rect x="741.4" y="387.0" width="86.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="744.4" y="398.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (48 samples, 7.33%)</title><rect x="741.4" y="371.0" width="86.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="744.4" y="382.0">new_sync_w..</text>
</g>
<g>
<title>pipe_write (47 samples, 7.18%)</title><rect x="743.2" y="355.0" width="84.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="746.2" y="366.0">pipe_write</text>
</g>
<g>
<title>__wake_up_sync_key (46 samples, 7.02%)</title><rect x="745.0" y="339.0" width="82.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="748.0" y="350.0">__wake_up..</text>
</g>
<g>
<title>__wake_up_common_lock (46 samples, 7.02%)</title><rect x="745.0" y="323.0" width="82.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="748.0" y="334.0">__wake_up..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (46 samples, 7.02%)</title><rect x="745.0" y="307.0" width="82.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="748.0" y="318.0">_raw_spin..</text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.76%)</title><rect x="827.9" y="435.0" width="9.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="830.9" y="446.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.76%)</title><rect x="827.9" y="419.0" width="9.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="830.9" y="430.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.76%)</title><rect x="827.9" y="403.0" width="9.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="830.9" y="414.0"></text>
</g>
<g>
<title>finish_task_switch (5 samples, 0.76%)</title><rect x="827.9" y="387.0" width="9.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="830.9" y="398.0"></text>
</g>
<g>
<title>ksys_write (1 samples, 0.15%)</title><rect x="836.9" y="435.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="839.9" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (3 samples, 0.46%)</title><rect x="838.7" y="627.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="841.7" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (3 samples, 0.46%)</title><rect x="838.7" y="611.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="841.7" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (3 samples, 0.46%)</title><rect x="838.7" y="595.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="841.7" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (2 samples, 0.31%)</title><rect x="838.7" y="579.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="841.7" y="590.0"></text>
</g>
<g>
<title>java/text/DateFormat.format (1 samples, 0.15%)</title><rect x="840.5" y="563.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="843.5" y="574.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (1 samples, 0.15%)</title><rect x="840.5" y="547.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="843.5" y="558.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (1 samples, 0.15%)</title><rect x="840.5" y="531.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="843.5" y="542.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.subFormat (1 samples, 0.15%)</title><rect x="840.5" y="515.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="843.5" y="526.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.zeroPaddingNumber (1 samples, 0.15%)</title><rect x="840.5" y="499.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="843.5" y="510.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.format (1 samples, 0.15%)</title><rect x="840.5" y="483.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="843.5" y="494.0"></text>
</g>
<g>
<title>java/text/DecimalFormat.format (1 samples, 0.15%)</title><rect x="840.5" y="467.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="843.5" y="478.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.15%)</title><rect x="842.3" y="579.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="845.3" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.15%)</title><rect x="842.3" y="563.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.3" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.15%)</title><rect x="844.1" y="707.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="847.1" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (2 samples, 0.31%)</title><rect x="845.9" y="739.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="848.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/TurboDAO.upsert (13 samples, 1.98%)</title><rect x="849.5" y="771.0" width="23.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.5" y="782.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/MemTable.upsert (13 samples, 1.98%)</title><rect x="849.5" y="755.0" width="23.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.5" y="766.0">r..</text>
</g>
<g>
<title>java/util/TreeMap.put (13 samples, 1.98%)</title><rect x="849.5" y="739.0" width="23.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.5" y="750.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 1.53%)</title><rect x="854.9" y="723.0" width="18.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="857.9" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.46%)</title><rect x="867.5" y="707.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="870.5" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.15%)</title><rect x="867.5" y="691.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="870.5" y="702.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.15%)</title><rect x="867.5" y="675.0" width="1.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="870.5" y="686.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.31%)</title><rect x="869.3" y="691.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="872.3" y="702.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.31%)</title><rect x="872.9" y="819.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="875.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.31%)</title><rect x="872.9" y="803.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="875.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.15%)</title><rect x="872.9" y="787.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="875.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.15%)</title><rect x="874.7" y="787.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="877.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.15%)</title><rect x="874.7" y="771.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="877.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.31%)</title><rect x="876.5" y="819.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="879.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.31%)</title><rect x="876.5" y="803.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="879.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.31%)</title><rect x="876.5" y="787.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="879.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (13 samples, 1.98%)</title><rect x="880.1" y="851.0" width="23.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="883.1" y="862.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.46%)</title><rect x="887.3" y="835.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="890.3" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.31%)</title><rect x="887.3" y="819.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="890.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.15%)</title><rect x="889.1" y="803.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="892.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.15%)</title><rect x="889.1" y="787.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="892.1" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.15%)</title><rect x="889.1" y="771.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="892.1" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.15%)</title><rect x="890.9" y="819.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="893.9" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.61%)</title><rect x="892.7" y="835.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="895.7" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.61%)</title><rect x="892.7" y="819.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="895.7" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.31%)</title><rect x="900.0" y="835.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="903.0" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.15%)</title><rect x="903.6" y="851.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="906.6" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.15%)</title><rect x="903.6" y="835.0" width="1.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="906.6" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.15%)</title><rect x="905.4" y="851.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="908.4" y="862.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.15%)</title><rect x="905.4" y="835.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="908.4" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.15%)</title><rect x="905.4" y="819.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="908.4" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.15%)</title><rect x="905.4" y="803.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="908.4" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.15%)</title><rect x="907.2" y="851.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="910.2" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.15%)</title><rect x="907.2" y="835.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="910.2" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.15%)</title><rect x="909.0" y="867.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="912.0" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (39 samples, 5.95%)</title><rect x="910.8" y="867.0" width="70.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="913.8" y="878.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (1 samples, 0.15%)</title><rect x="914.4" y="851.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="917.4" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (36 samples, 5.50%)</title><rect x="916.2" y="851.0" width="64.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="919.2" y="862.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (12 samples, 1.83%)</title><rect x="923.4" y="835.0" width="21.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="926.4" y="846.0">J..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.30.so (5 samples, 0.76%)</title><rect x="923.4" y="819.0" width="9.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="926.4" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.15%)</title><rect x="932.4" y="819.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="935.4" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.15%)</title><rect x="934.2" y="819.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="937.2" y="830.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.31%)</title><rect x="936.0" y="819.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="939.0" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.46%)</title><rect x="939.6" y="819.0" width="5.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="942.6" y="830.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.15%)</title><rect x="941.4" y="803.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="944.4" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.15%)</title><rect x="943.2" y="803.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="946.2" y="814.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.15%)</title><rect x="943.2" y="787.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.2" y="798.0"></text>
</g>
<g>
<title>__recv (20 samples, 3.05%)</title><rect x="945.0" y="835.0" width="36.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="948.0" y="846.0">__r..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (18 samples, 2.75%)</title><rect x="948.6" y="819.0" width="32.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="951.6" y="830.0">en..</text>
</g>
<g>
<title>do_syscall_64 (18 samples, 2.75%)</title><rect x="948.6" y="803.0" width="32.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="951.6" y="814.0">do..</text>
</g>
<g>
<title>__x64_sys_recvfrom (15 samples, 2.29%)</title><rect x="954.0" y="787.0" width="27.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="957.0" y="798.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (15 samples, 2.29%)</title><rect x="954.0" y="771.0" width="27.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="957.0" y="782.0">_..</text>
</g>
<g>
<title>sock_recvmsg (14 samples, 2.14%)</title><rect x="954.0" y="755.0" width="25.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="957.0" y="766.0">s..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.15%)</title><rect x="954.0" y="739.0" width="1.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="957.0" y="750.0"></text>
</g>
<g>
<title>inet6_recvmsg (9 samples, 1.37%)</title><rect x="955.8" y="739.0" width="16.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="958.8" y="750.0"></text>
</g>
<g>
<title>tcp_recvmsg (9 samples, 1.37%)</title><rect x="955.8" y="723.0" width="16.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="958.8" y="734.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.61%)</title><rect x="957.6" y="707.0" width="7.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="960.6" y="718.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.15%)</title><rect x="957.6" y="691.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="960.6" y="702.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.31%)</title><rect x="959.4" y="691.0" width="3.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="962.4" y="702.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.15%)</title><rect x="959.4" y="675.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="962.4" y="686.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.15%)</title><rect x="959.4" y="659.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="962.4" y="670.0"></text>
</g>
<g>
<title>sock_rfree (1 samples, 0.15%)</title><rect x="961.2" y="675.0" width="1.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="964.2" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.15%)</title><rect x="963.0" y="691.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="966.0" y="702.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.15%)</title><rect x="964.8" y="707.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="967.8" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.31%)</title><rect x="966.6" y="707.0" width="3.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="969.6" y="718.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.15%)</title><rect x="970.2" y="707.0" width="1.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="973.2" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (1 samples, 0.15%)</title><rect x="970.2" y="691.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="973.2" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.15%)</title><rect x="970.2" y="675.0" width="1.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="973.2" y="686.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.15%)</title><rect x="970.2" y="659.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="973.2" y="670.0"></text>
</g>
<g>
<title>copy_user_generic_string (1 samples, 0.15%)</title><rect x="970.2" y="643.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="973.2" y="654.0"></text>
</g>
<g>
<title>security_socket_recvmsg (4 samples, 0.61%)</title><rect x="972.0" y="739.0" width="7.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="975.0" y="750.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.46%)</title><rect x="973.8" y="723.0" width="5.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="976.8" y="734.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.46%)</title><rect x="973.8" y="707.0" width="5.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="976.8" y="718.0"></text>
</g>
<g>
<title>aa_label_next_confined (1 samples, 0.15%)</title><rect x="975.6" y="691.0" width="1.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="978.6" y="702.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (1 samples, 0.15%)</title><rect x="977.4" y="691.0" width="1.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="980.4" y="702.0"></text>
</g>
<g>
<title>aa_profile_af_perm (1 samples, 0.15%)</title><rect x="977.4" y="675.0" width="1.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="980.4" y="686.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.15%)</title><rect x="979.2" y="755.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="982.2" y="766.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.15%)</title><rect x="979.2" y="739.0" width="1.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="982.2" y="750.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.15%)</title><rect x="979.2" y="723.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="982.2" y="734.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.15%)</title><rect x="979.2" y="707.0" width="1.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="982.2" y="718.0"></text>
</g>
<g>
<title>start_thread (116 samples, 17.71%)</title><rect x="981.0" y="915.0" width="209.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="984.0" y="926.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (116 samples, 17.71%)</title><rect x="981.0" y="899.0" width="209.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="984.0" y="910.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (116 samples, 17.71%)</title><rect x="981.0" y="883.0" width="209.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.0" y="894.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (30 samples, 4.58%)</title><rect x="981.0" y="867.0" width="54.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="984.0" y="878.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (30 samples, 4.58%)</title><rect x="981.0" y="851.0" width="54.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.0" y="862.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.31%)</title><rect x="981.0" y="835.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.0" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.31%)</title><rect x="981.0" y="819.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.0" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.15%)</title><rect x="982.8" y="803.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="985.8" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (28 samples, 4.27%)</title><rect x="984.6" y="835.0" width="50.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="987.6" y="846.0">G1Rem..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (28 samples, 4.27%)</title><rect x="984.6" y="819.0" width="50.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="987.6" y="830.0">G1Rem..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (28 samples, 4.27%)</title><rect x="984.6" y="803.0" width="50.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.6" y="814.0">G1Col..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (28 samples, 4.27%)</title><rect x="984.6" y="787.0" width="50.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.6" y="798.0">Dirty..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (28 samples, 4.27%)</title><rect x="984.6" y="771.0" width="50.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.6" y="782.0">G1Ref..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.15%)</title><rect x="984.6" y="755.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.6" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (24 samples, 3.66%)</title><rect x="986.4" y="755.0" width="43.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="989.4" y="766.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (14 samples, 2.14%)</title><rect x="999.0" y="739.0" width="25.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1002.0" y="750.0">G..</text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.15%)</title><rect x="1017.1" y="723.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1020.1" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (3 samples, 0.46%)</title><rect x="1018.9" y="723.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.9" y="734.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.15%)</title><rect x="1024.3" y="739.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1027.3" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.15%)</title><rect x="1026.1" y="739.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1029.1" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.15%)</title><rect x="1027.9" y="739.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1030.9" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (3 samples, 0.46%)</title><rect x="1029.7" y="755.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.7" y="766.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.46%)</title><rect x="1029.7" y="739.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1032.7" y="750.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.31%)</title><rect x="1029.7" y="723.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1032.7" y="734.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.31%)</title><rect x="1029.7" y="707.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1032.7" y="718.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.15%)</title><rect x="1033.3" y="723.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.3" y="734.0"></text>
</g>
<g>
<title>JavaThread::run() (83 samples, 12.67%)</title><rect x="1035.1" y="867.0" width="149.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1038.1" y="878.0">JavaThread::run()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (81 samples, 12.37%)</title><rect x="1035.1" y="851.0" width="145.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.1" y="862.0">CompileBroker::com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (81 samples, 12.37%)</title><rect x="1035.1" y="835.0" width="145.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1038.1" y="846.0">CompileBroker::inv..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (77 samples, 11.76%)</title><rect x="1035.1" y="819.0" width="138.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.1" y="830.0">C2Compiler::compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (77 samples, 11.76%)</title><rect x="1035.1" y="803.0" width="138.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.1" y="814.0">Compile::Compile(..</text>
</g>
<g>
<title>Compile::Code_Gen() (53 samples, 8.09%)</title><rect x="1035.1" y="787.0" width="95.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1038.1" y="798.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.31%)</title><rect x="1035.1" y="771.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1038.1" y="782.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.15%)</title><rect x="1035.1" y="755.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.1" y="766.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.15%)</title><rect x="1035.1" y="739.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1038.1" y="750.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.15%)</title><rect x="1035.1" y="723.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1038.1" y="734.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.15%)</title><rect x="1036.9" y="755.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1039.9" y="766.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.15%)</title><rect x="1036.9" y="739.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.9" y="750.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.15%)</title><rect x="1036.9" y="723.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1039.9" y="734.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.15%)</title><rect x="1038.7" y="771.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1041.7" y="782.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.15%)</title><rect x="1038.7" y="755.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1041.7" y="766.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.92%)</title><rect x="1040.5" y="771.0" width="10.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1043.5" y="782.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.15%)</title><rect x="1040.5" y="755.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1043.5" y="766.0"></text>
</g>
<g>
<title>CmpLNode::Opcode() const (1 samples, 0.15%)</title><rect x="1042.3" y="755.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1045.3" y="766.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.15%)</title><rect x="1044.1" y="755.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.1" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.46%)</title><rect x="1045.9" y="755.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1048.9" y="766.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.15%)</title><rect x="1047.7" y="739.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1050.7" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.15%)</title><rect x="1049.5" y="739.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1052.5" y="750.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.15%)</title><rect x="1051.3" y="771.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1054.3" y="782.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.15%)</title><rect x="1051.3" y="755.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1054.3" y="766.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.15%)</title><rect x="1051.3" y="739.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.3" y="750.0"></text>
</g>
<g>
<title>jmpDirNode::ideal_Opcode() const (1 samples, 0.15%)</title><rect x="1051.3" y="723.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1054.3" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.61%)</title><rect x="1053.1" y="771.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.1" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.61%)</title><rect x="1053.1" y="755.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.1" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.15%)</title><rect x="1053.1" y="739.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.15%)</title><rect x="1054.9" y="739.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.9" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.15%)</title><rect x="1054.9" y="723.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.9" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.15%)</title><rect x="1054.9" y="707.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1057.9" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.31%)</title><rect x="1056.7" y="739.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1059.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 5.80%)</title><rect x="1060.3" y="771.0" width="68.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1063.3" y="782.0">PhaseCh..</text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.15%)</title><rect x="1060.3" y="755.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1063.3" y="766.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.15%)</title><rect x="1062.1" y="755.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.46%)</title><rect x="1063.9" y="755.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.9" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.31%)</title><rect x="1065.7" y="739.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1068.7" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.15%)</title><rect x="1067.5" y="723.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.61%)</title><rect x="1069.3" y="755.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1072.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 1.37%)</title><rect x="1076.5" y="755.0" width="16.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.5" y="766.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.15%)</title><rect x="1078.3" y="739.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.3" y="750.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.15%)</title><rect x="1080.1" y="739.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1083.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.31%)</title><rect x="1081.9" y="739.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.9" y="750.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.15%)</title><rect x="1083.7" y="723.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1086.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.31%)</title><rect x="1085.5" y="739.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1088.5" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.15%)</title><rect x="1087.3" y="723.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.31%)</title><rect x="1089.1" y="739.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.1" y="750.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.31%)</title><rect x="1089.1" y="723.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1092.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.61%)</title><rect x="1092.7" y="755.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.7" y="766.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.15%)</title><rect x="1094.5" y="739.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.5" y="750.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.15%)</title><rect x="1096.3" y="739.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.3" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.15%)</title><rect x="1098.1" y="739.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1101.1" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.15%)</title><rect x="1098.1" y="723.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1101.1" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.15%)</title><rect x="1098.1" y="707.0" width="1.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1101.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.87] (1 samples, 0.15%)</title><rect x="1099.9" y="755.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.9" y="766.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.15%)</title><rect x="1099.9" y="739.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.15%)</title><rect x="1101.7" y="755.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.92%)</title><rect x="1103.5" y="755.0" width="10.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.5" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.76%)</title><rect x="1103.5" y="739.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.5" y="750.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.15%)</title><rect x="1112.5" y="739.0" width="1.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1115.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.15%)</title><rect x="1114.3" y="755.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.3" y="766.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.31%)</title><rect x="1116.1" y="755.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.1" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.31%)</title><rect x="1116.1" y="739.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.1" y="750.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.15%)</title><rect x="1116.1" y="723.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.1" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.15%)</title><rect x="1117.9" y="723.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.9" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.15%)</title><rect x="1119.7" y="755.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.7" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.15%)</title><rect x="1119.7" y="739.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.7" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.15%)</title><rect x="1121.5" y="755.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.5" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.15%)</title><rect x="1121.5" y="739.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.5" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.15%)</title><rect x="1123.3" y="755.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.3" y="766.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.15%)</title><rect x="1123.3" y="739.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.3" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.31%)</title><rect x="1125.1" y="755.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.1" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.15%)</title><rect x="1125.1" y="739.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.1" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.15%)</title><rect x="1125.1" y="723.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.1" y="734.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.15%)</title><rect x="1126.9" y="739.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.9" y="750.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.15%)</title><rect x="1126.9" y="723.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.9" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.30.so (1 samples, 0.15%)</title><rect x="1126.9" y="707.0" width="1.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1129.9" y="718.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.15%)</title><rect x="1128.7" y="771.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.7" y="782.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 2.90%)</title><rect x="1130.5" y="787.0" width="34.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.5" y="798.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.15%)</title><rect x="1130.5" y="771.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.5" y="782.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.15%)</title><rect x="1130.5" y="755.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.5" y="766.0"></text>
</g>
<g>
<title>StoreLNode::Opcode() const (1 samples, 0.15%)</title><rect x="1130.5" y="739.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.5" y="750.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (5 samples, 0.76%)</title><rect x="1132.4" y="771.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (5 samples, 0.76%)</title><rect x="1132.4" y="755.0" width="9.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.15%)</title><rect x="1132.4" y="739.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.4" y="750.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.15%)</title><rect x="1132.4" y="723.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.4" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.15%)</title><rect x="1132.4" y="707.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1135.4" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.15%)</title><rect x="1132.4" y="691.0" width="1.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1135.4" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.15%)</title><rect x="1132.4" y="675.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1135.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.15%)</title><rect x="1134.2" y="739.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.31%)</title><rect x="1136.0" y="739.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.15%)</title><rect x="1137.8" y="723.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.8" y="734.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.15%)</title><rect x="1139.6" y="739.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.15%)</title><rect x="1141.4" y="771.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.15%)</title><rect x="1141.4" y="755.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.15%)</title><rect x="1141.4" y="739.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.4" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.15%)</title><rect x="1141.4" y="723.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.4" y="734.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.15%)</title><rect x="1141.4" y="707.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.4" y="718.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.15%)</title><rect x="1141.4" y="691.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.4" y="702.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.15%)</title><rect x="1141.4" y="675.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.4" y="686.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) [clone .constprop.68] (1 samples, 0.15%)</title><rect x="1141.4" y="659.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.4" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.15%)</title><rect x="1141.4" y="643.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.4" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.15%)</title><rect x="1141.4" y="627.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.4" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.15%)</title><rect x="1141.4" y="611.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.4" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.15%)</title><rect x="1141.4" y="595.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.4" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.15%)</title><rect x="1141.4" y="579.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.4" y="590.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.31%)</title><rect x="1143.2" y="771.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.2" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.15%)</title><rect x="1145.0" y="755.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.0" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.15%)</title><rect x="1145.0" y="739.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.0" y="750.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.15%)</title><rect x="1145.0" y="723.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.0" y="734.0"></text>
</g>
<g>
<title>TypePtr::eq(Type const*) const [clone .part.89] (1 samples, 0.15%)</title><rect x="1145.0" y="707.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (6 samples, 0.92%)</title><rect x="1146.8" y="771.0" width="10.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.8" y="782.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.15%)</title><rect x="1146.8" y="755.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.8" y="766.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.15%)</title><rect x="1148.6" y="755.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.6" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.31%)</title><rect x="1150.4" y="755.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.15%)</title><rect x="1152.2" y="739.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.15%)</title><rect x="1152.2" y="723.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.2" y="734.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.15%)</title><rect x="1152.2" y="707.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.2" y="718.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.242] (1 samples, 0.15%)</title><rect x="1152.2" y="691.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.2" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.15%)</title><rect x="1154.0" y="755.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.0" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.15%)</title><rect x="1155.8" y="755.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.8" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.15%)</title><rect x="1155.8" y="739.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.8" y="750.0"></text>
</g>
<g>
<title>AddINode::Identity(PhaseGVN*) (1 samples, 0.15%)</title><rect x="1155.8" y="723.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.8" y="734.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 0.15%)</title><rect x="1155.8" y="707.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.8" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.61%)</title><rect x="1157.6" y="771.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.6" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.61%)</title><rect x="1157.6" y="755.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.6" y="766.0"></text>
</g>
<g>
<title>CastIINode::Value(PhaseGVN*) const (1 samples, 0.15%)</title><rect x="1157.6" y="739.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.6" y="750.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.15%)</title><rect x="1159.4" y="739.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.4" y="750.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.15%)</title><rect x="1161.2" y="739.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="750.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.15%)</title><rect x="1161.2" y="723.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.2" y="734.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.15%)</title><rect x="1161.2" y="707.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.2" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.15%)</title><rect x="1161.2" y="691.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.2" y="702.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.15%)</title><rect x="1161.2" y="675.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.2" y="686.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.15%)</title><rect x="1163.0" y="739.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.0" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.15%)</title><rect x="1163.0" y="723.0" width="1.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1166.0" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.15%)</title><rect x="1163.0" y="707.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1166.0" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.15%)</title><rect x="1163.0" y="691.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1166.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.76%)</title><rect x="1164.8" y="787.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.8" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.76%)</title><rect x="1164.8" y="771.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.76%)</title><rect x="1164.8" y="755.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.76%)</title><rect x="1164.8" y="739.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.76%)</title><rect x="1164.8" y="723.0" width="9.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.76%)</title><rect x="1164.8" y="707.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.76%)</title><rect x="1164.8" y="691.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.8" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.76%)</title><rect x="1164.8" y="675.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.76%)</title><rect x="1164.8" y="659.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.76%)</title><rect x="1164.8" y="643.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.76%)</title><rect x="1164.8" y="627.0" width="9.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.8" y="638.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.15%)</title><rect x="1164.8" y="611.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.8" y="622.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.15%)</title><rect x="1164.8" y="595.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.8" y="606.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.15%)</title><rect x="1164.8" y="579.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.8" y="590.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.15%)</title><rect x="1164.8" y="563.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.8" y="574.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.15%)</title><rect x="1164.8" y="547.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.8" y="558.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.15%)</title><rect x="1164.8" y="531.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.8" y="542.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.15%)</title><rect x="1164.8" y="515.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.8" y="526.0"></text>
</g>
<g>
<title>ArenaBitMap::ArenaBitMap(Arena*, unsigned long) (1 samples, 0.15%)</title><rect x="1164.8" y="499.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.61%)</title><rect x="1166.6" y="611.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.61%)</title><rect x="1166.6" y="595.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.61%)</title><rect x="1166.6" y="579.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.61%)</title><rect x="1166.6" y="563.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.61%)</title><rect x="1166.6" y="547.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.61%)</title><rect x="1166.6" y="531.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.46%)</title><rect x="1166.6" y="515.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.6" y="526.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.15%)</title><rect x="1166.6" y="499.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.6" y="510.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.15%)</title><rect x="1166.6" y="483.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.6" y="494.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.15%)</title><rect x="1166.6" y="467.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.31%)</title><rect x="1168.4" y="499.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.31%)</title><rect x="1168.4" y="483.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.31%)</title><rect x="1168.4" y="467.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.4" y="478.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.15%)</title><rect x="1168.4" y="451.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.4" y="462.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.15%)</title><rect x="1168.4" y="435.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.4" y="446.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.15%)</title><rect x="1168.4" y="419.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.4" y="430.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.15%)</title><rect x="1168.4" y="403.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.15%)</title><rect x="1170.2" y="451.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.15%)</title><rect x="1170.2" y="435.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.15%)</title><rect x="1170.2" y="419.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.2" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.15%)</title><rect x="1170.2" y="403.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.2" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.15%)</title><rect x="1170.2" y="387.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.15%)</title><rect x="1170.2" y="371.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.15%)</title><rect x="1170.2" y="355.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.15%)</title><rect x="1170.2" y="339.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.15%)</title><rect x="1170.2" y="323.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.15%)</title><rect x="1170.2" y="307.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.2" y="318.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.15%)</title><rect x="1170.2" y="291.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.2" y="302.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.15%)</title><rect x="1170.2" y="275.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.2" y="286.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.15%)</title><rect x="1170.2" y="259.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.2" y="270.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.15%)</title><rect x="1170.2" y="243.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.2" y="254.0"></text>
</g>
<g>
<title>G1BarrierSetC2::g1_mark_card(GraphKit*, IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) const (1 samples, 0.15%)</title><rect x="1170.2" y="227.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.2" y="238.0"></text>
</g>
<g>
<title>IdealKit::store(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool) (1 samples, 0.15%)</title><rect x="1170.2" y="211.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.2" y="222.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.15%)</title><rect x="1170.2" y="195.0" width="1.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1173.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_instanceof() (1 samples, 0.15%)</title><rect x="1172.0" y="515.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.0" y="526.0"></text>
</g>
<g>
<title>GraphKit::gen_instanceof(Node*, Node*, bool) (1 samples, 0.15%)</title><rect x="1172.0" y="499.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.0" y="510.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.15%)</title><rect x="1172.0" y="483.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.0" y="494.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.15%)</title><rect x="1172.0" y="467.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.0" y="478.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.15%)</title><rect x="1172.0" y="451.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.0" y="462.0"></text>
</g>
<g>
<title>TypeOopPtr::hash() const (1 samples, 0.15%)</title><rect x="1172.0" y="435.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.0" y="446.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.15%)</title><rect x="1172.0" y="419.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="430.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 0.61%)</title><rect x="1173.8" y="819.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 0.61%)</title><rect x="1173.8" y="803.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.61%)</title><rect x="1173.8" y="787.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 0.61%)</title><rect x="1173.8" y="771.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.30.so (1 samples, 0.15%)</title><rect x="1173.8" y="755.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1176.8" y="766.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (1 samples, 0.15%)</title><rect x="1175.6" y="755.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.6" y="766.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.15%)</title><rect x="1175.6" y="739.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.6" y="750.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.15%)</title><rect x="1175.6" y="723.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.15%)</title><rect x="1175.6" y="707.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.15%)</title><rect x="1175.6" y="691.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.6" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.15%)</title><rect x="1175.6" y="675.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.6" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.15%)</title><rect x="1175.6" y="659.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.6" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.15%)</title><rect x="1175.6" y="643.0" width="1.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1178.6" y="654.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.31%)</title><rect x="1177.4" y="755.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="766.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.15%)</title><rect x="1177.4" y="739.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="750.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.15%)</title><rect x="1177.4" y="723.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="734.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.15%)</title><rect x="1177.4" y="707.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.15%)</title><rect x="1177.4" y="691.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.15%)</title><rect x="1177.4" y="675.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="686.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.15%)</title><rect x="1179.2" y="739.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.2" y="750.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.15%)</title><rect x="1179.2" y="723.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="734.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.15%)</title><rect x="1179.2" y="707.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.2" y="718.0"></text>
</g>
<g>
<title>Interval::add_range(int, int) (1 samples, 0.15%)</title><rect x="1179.2" y="691.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="702.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (1 samples, 0.15%)</title><rect x="1181.0" y="851.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.0" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.15%)</title><rect x="1181.0" y="835.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="846.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.15%)</title><rect x="1181.0" y="819.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="830.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (1 samples, 0.15%)</title><rect x="1181.0" y="803.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="814.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (1 samples, 0.15%)</title><rect x="1181.0" y="787.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.0" y="798.0"></text>
</g>
<g>
<title>DirectNativeCallWrapper::instruction_address() const (1 samples, 0.15%)</title><rect x="1181.0" y="771.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="782.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.15%)</title><rect x="1182.8" y="851.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="862.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.15%)</title><rect x="1182.8" y="835.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="846.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.15%)</title><rect x="1182.8" y="819.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="830.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.15%)</title><rect x="1182.8" y="803.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1185.8" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(methodHandle const&amp;) (1 samples, 0.15%)</title><rect x="1182.8" y="787.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.15%)</title><rect x="1184.6" y="867.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="878.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.15%)</title><rect x="1186.4" y="867.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.4" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.15%)</title><rect x="1186.4" y="851.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.4" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.15%)</title><rect x="1186.4" y="835.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.4" y="846.0"></text>
</g>
<g>
<title>SuspendibleThreadSet::synchronize() (1 samples, 0.15%)</title><rect x="1186.4" y="819.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.4" y="830.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.15%)</title><rect x="1186.4" y="803.0" width="1.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1189.4" y="814.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.15%)</title><rect x="1188.2" y="867.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.2" y="878.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.15%)</title><rect x="1188.2" y="851.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.2" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.15%)</title><rect x="1188.2" y="835.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.2" y="846.0"></text>
</g>
</g>
</svg>
