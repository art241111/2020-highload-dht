<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="565"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="565"> </text>
<g id="frames">
<g>
<title>all (2,467 samples, 100.00%)</title><rect x="10.0" y="531.0" width="1180.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="13.0" y="542.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,467 samples, 100.00%)</title><rect x="10.0" y="515.0" width="1180.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="526.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (2,467 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="510.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,467 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="494.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,467 samples, 100.00%)</title><rect x="10.0" y="467.0" width="1180.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="478.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,344 samples, 95.01%)</title><rect x="10.0" y="451.0" width="1121.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="462.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,344 samples, 95.01%)</title><rect x="10.0" y="435.0" width="1121.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="446.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (2,330 samples, 94.45%)</title><rect x="10.0" y="419.0" width="1114.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="430.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (42 samples, 1.70%)</title><rect x="10.0" y="403.0" width="20.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (42 samples, 1.70%)</title><rect x="10.0" y="387.0" width="20.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (28 samples, 1.13%)</title><rect x="10.0" y="371.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (28 samples, 1.13%)</title><rect x="10.0" y="355.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>byte[] (28 samples, 1.13%)</title><rect x="10.0" y="339.0" width="13.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.57%)</title><rect x="23.4" y="371.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.4" y="382.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (14 samples, 0.57%)</title><rect x="23.4" y="355.0" width="6.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="26.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (16 samples, 0.65%)</title><rect x="30.1" y="403.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (16 samples, 0.65%)</title><rect x="30.1" y="387.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.1" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (16 samples, 0.65%)</title><rect x="30.1" y="371.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="33.1" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (16 samples, 0.65%)</title><rect x="30.1" y="355.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.1" y="366.0"></text>
</g>
<g>
<title>java.lang.String (4 samples, 0.16%)</title><rect x="30.1" y="339.0" width="1.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="33.1" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (12 samples, 0.49%)</title><rect x="32.0" y="339.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.0" y="350.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.49%)</title><rect x="32.0" y="323.0" width="5.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="35.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/art241111/MyHttpServer.entity (2,272 samples, 92.10%)</title><rect x="37.7" y="403.0" width="1086.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.7" y="414.0">ru/mail/polis/service/art241111/MyHttpServer.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.16%)</title><rect x="37.7" y="387.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.7" y="398.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.16%)</title><rect x="37.7" y="371.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.7" y="382.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (4 samples, 0.16%)</title><rect x="37.7" y="355.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.7" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.16%)</title><rect x="37.7" y="339.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.7" y="350.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.16%)</title><rect x="37.7" y="323.0" width="2.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="40.7" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 0.73%)</title><rect x="39.7" y="387.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.7" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 0.73%)</title><rect x="39.7" y="371.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.7" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (18 samples, 0.73%)</title><rect x="39.7" y="355.0" width="8.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="42.7" y="366.0"></text>
</g>
<g>
<title>ru.mail.polis.service.art241111.handlers.EntityHandler (9 samples, 0.36%)</title><rect x="48.3" y="387.0" width="4.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="51.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/art241111/handlers/EntityHandler.handleGetRequest (2,241 samples, 90.84%)</title><rect x="52.6" y="387.0" width="1071.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.6" y="398.0">ru/mail/polis/service/art241111/handlers/EntityHandler.handleGetRequest</text>
</g>
<g>
<title>byte[] (5 samples, 0.20%)</title><rect x="52.6" y="371.0" width="2.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="55.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (40 samples, 1.62%)</title><rect x="55.0" y="371.0" width="19.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.0" y="382.0"></text>
</g>
<g>
<title>one.nio.http.Response (9 samples, 0.36%)</title><rect x="55.0" y="355.0" width="4.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="58.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (31 samples, 1.26%)</title><rect x="59.3" y="355.0" width="14.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.3" y="366.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.41%)</title><rect x="59.3" y="339.0" width="4.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="62.3" y="350.0"></text>
</g>
<g>
<title>java.lang.String[] (12 samples, 0.49%)</title><rect x="64.0" y="339.0" width="5.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="67.0" y="350.0"></text>
</g>
<g>
<title>java.lang.String (9 samples, 0.36%)</title><rect x="69.8" y="339.0" width="4.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="72.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (2,196 samples, 89.01%)</title><rect x="74.1" y="371.0" width="1050.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="77.1" y="382.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (212 samples, 8.59%)</title><rect x="74.1" y="355.0" width="101.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.1" y="366.0">com/google/c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (212 samples, 8.59%)</title><rect x="74.1" y="339.0" width="101.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.1" y="350.0">com/google/c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (212 samples, 8.59%)</title><rect x="74.1" y="323.0" width="101.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.1" y="334.0">com/google/c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (212 samples, 8.59%)</title><rect x="74.1" y="307.0" width="101.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.1" y="318.0">com/google/c..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (212 samples, 8.59%)</title><rect x="74.1" y="291.0" width="101.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="77.1" y="302.0">ru/mail/poli..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (181 samples, 7.34%)</title><rect x="74.1" y="275.0" width="86.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.1" y="286.0">com/google..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (181 samples, 7.34%)</title><rect x="74.1" y="259.0" width="86.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.1" y="270.0">java/util/..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (181 samples, 7.34%)</title><rect x="74.1" y="243.0" width="86.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="77.1" y="254.0">java/util/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (181 samples, 7.34%)</title><rect x="74.1" y="227.0" width="86.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.1" y="238.0">java/util/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (181 samples, 7.34%)</title><rect x="74.1" y="211.0" width="86.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.1" y="222.0">java/util/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (181 samples, 7.34%)</title><rect x="74.1" y="195.0" width="86.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.1" y="206.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (181 samples, 7.34%)</title><rect x="74.1" y="179.0" width="86.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="77.1" y="190.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (160 samples, 6.49%)</title><rect x="74.1" y="163.0" width="76.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.1" y="174.0">com/goog..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable$1.next (160 samples, 6.49%)</title><rect x="74.1" y="147.0" width="76.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="77.1" y="158.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable$1.next (160 samples, 6.49%)</title><rect x="74.1" y="131.0" width="76.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="77.1" y="142.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.getCell (160 samples, 6.49%)</title><rect x="74.1" y="115.0" width="76.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="77.1" y="126.0">ru/mail/..</text>
</g>
<g>
<title>ru.mail.polis.dao.art241111.Cell (10 samples, 0.41%)</title><rect x="74.1" y="99.0" width="4.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="77.1" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.art241111.Value (7 samples, 0.28%)</title><rect x="78.9" y="99.0" width="3.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="81.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.getOffset (55 samples, 2.23%)</title><rect x="82.2" y="99.0" width="26.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.2" y="110.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.readOffset (55 samples, 2.23%)</title><rect x="82.2" y="83.0" width="26.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="85.2" y="94.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (55 samples, 2.23%)</title><rect x="82.2" y="67.0" width="26.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.2" y="78.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (36 samples, 1.46%)</title><rect x="82.2" y="51.0" width="17.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="85.2" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (19 samples, 0.77%)</title><rect x="99.4" y="51.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="102.4" y="62.0"></text>
</g>
<g>
<title>byte[] (19 samples, 0.77%)</title><rect x="99.4" y="35.0" width="9.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="102.4" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.readOffset (88 samples, 3.57%)</title><rect x="108.5" y="99.0" width="42.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.5" y="110.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (88 samples, 3.57%)</title><rect x="108.5" y="83.0" width="42.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.5" y="94.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (52 samples, 2.11%)</title><rect x="108.5" y="67.0" width="24.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="111.5" y="78.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (36 samples, 1.46%)</title><rect x="133.4" y="67.0" width="17.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="136.4" y="78.0"></text>
</g>
<g>
<title>byte[] (36 samples, 1.46%)</title><rect x="133.4" y="51.0" width="17.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="136.4" y="62.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (21 samples, 0.85%)</title><rect x="150.6" y="163.0" width="10.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="153.6" y="174.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (21 samples, 0.85%)</title><rect x="150.6" y="147.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/Cell.compareTo (21 samples, 0.85%)</title><rect x="150.6" y="131.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/Cell.compareTo (21 samples, 0.85%)</title><rect x="150.6" y="115.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/Cell.getKey (21 samples, 0.85%)</title><rect x="150.6" y="99.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.6" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (21 samples, 0.85%)</title><rect x="150.6" y="83.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.6" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (21 samples, 0.85%)</title><rect x="150.6" y="67.0" width="10.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="153.6" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/TurboDAO$$Lambda$68/1201052067.apply (31 samples, 1.26%)</title><rect x="160.7" y="275.0" width="14.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/Cell.getKey (31 samples, 1.26%)</title><rect x="160.7" y="259.0" width="14.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="163.7" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (31 samples, 1.26%)</title><rect x="160.7" y="243.0" width="14.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="163.7" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (31 samples, 1.26%)</title><rect x="160.7" y="227.0" width="14.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="163.7" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (22 samples, 0.89%)</title><rect x="175.5" y="355.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.5" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (22 samples, 0.89%)</title><rect x="175.5" y="339.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="178.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/TurboDAO$$Lambda$70/1327425782.apply (22 samples, 0.89%)</title><rect x="175.5" y="323.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="178.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/TurboDAO.lambda$iterator$4 (22 samples, 0.89%)</title><rect x="175.5" y="307.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (11 samples, 0.45%)</title><rect x="175.5" y="291.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.5" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (11 samples, 0.45%)</title><rect x="175.5" y="275.0" width="5.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="178.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/Cell.getKey (11 samples, 0.45%)</title><rect x="180.8" y="291.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="183.8" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (11 samples, 0.45%)</title><rect x="180.8" y="275.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.8" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (11 samples, 0.45%)</title><rect x="180.8" y="259.0" width="5.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="183.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (16 samples, 0.65%)</title><rect x="186.0" y="355.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (16 samples, 0.65%)</title><rect x="186.0" y="339.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (16 samples, 0.65%)</title><rect x="186.0" y="323.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="189.0" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (16 samples, 0.65%)</title><rect x="186.0" y="307.0" width="7.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="189.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (18 samples, 0.73%)</title><rect x="193.7" y="355.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.7" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (18 samples, 0.73%)</title><rect x="193.7" y="339.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.7" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (18 samples, 0.73%)</title><rect x="193.7" y="323.0" width="8.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="196.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/TurboDAO.iterator (1,928 samples, 78.15%)</title><rect x="202.3" y="355.0" width="922.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.3" y="366.0">ru/mail/polis/dao/art241111/TurboDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (7 samples, 0.28%)</title><rect x="202.3" y="339.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.3" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (7 samples, 0.28%)</title><rect x="202.3" y="323.0" width="3.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="205.3" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (9 samples, 0.36%)</title><rect x="205.6" y="339.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.6" y="350.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (9 samples, 0.36%)</title><rect x="205.6" y="323.0" width="4.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="208.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/TurboDAO.cellIterator (1,912 samples, 77.50%)</title><rect x="209.9" y="339.0" width="914.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.9" y="350.0">ru/mail/polis/dao/art241111/TurboDAO.cellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (293 samples, 11.88%)</title><rect x="209.9" y="323.0" width="140.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="212.9" y="334.0">com/google/common/..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (7 samples, 0.28%)</title><rect x="209.9" y="307.0" width="3.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="212.9" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (286 samples, 11.59%)</title><rect x="213.3" y="307.0" width="136.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.3" y="318.0">com/google/common..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (9 samples, 0.36%)</title><rect x="213.3" y="291.0" width="4.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="216.3" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (17 samples, 0.69%)</title><rect x="217.6" y="291.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.6" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (17 samples, 0.69%)</title><rect x="217.6" y="275.0" width="8.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="220.6" y="286.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (12 samples, 0.49%)</title><rect x="225.7" y="291.0" width="5.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="228.7" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (16 samples, 0.65%)</title><rect x="231.5" y="291.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="234.5" y="302.0"></text>
</g>
<g>
<title>java.util.ArrayList$Itr (16 samples, 0.65%)</title><rect x="231.5" y="275.0" width="7.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="234.5" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (6 samples, 0.24%)</title><rect x="239.1" y="291.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.1" y="302.0"></text>
</g>
<g>
<title>java.lang.Object[] (6 samples, 0.24%)</title><rect x="239.1" y="275.0" width="2.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="242.1" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (226 samples, 9.16%)</title><rect x="242.0" y="291.0" width="108.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.0" y="302.0">java/util/Pri..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (226 samples, 9.16%)</title><rect x="242.0" y="275.0" width="108.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.0" y="286.0">java/util/Pri..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (226 samples, 9.16%)</title><rect x="242.0" y="259.0" width="108.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.0" y="270.0">java/util/Pri..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (226 samples, 9.16%)</title><rect x="242.0" y="243.0" width="108.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.0" y="254.0">java/util/Pri..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (226 samples, 9.16%)</title><rect x="242.0" y="227.0" width="108.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.0" y="238.0">com/google/co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (226 samples, 9.16%)</title><rect x="242.0" y="211.0" width="108.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.0" y="222.0">com/google/co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (198 samples, 8.03%)</title><rect x="242.0" y="195.0" width="94.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.0" y="206.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (6 samples, 0.24%)</title><rect x="242.0" y="179.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.0" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (6 samples, 0.24%)</title><rect x="242.0" y="163.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/MemTable$$Lambda$66/109781266.apply (6 samples, 0.24%)</title><rect x="242.0" y="147.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/MemTable.lambda$iterator$0 (6 samples, 0.24%)</title><rect x="242.0" y="131.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.0" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.art241111.Cell (6 samples, 0.24%)</title><rect x="242.0" y="115.0" width="2.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="245.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable$1.next (192 samples, 7.78%)</title><rect x="244.9" y="179.0" width="91.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.9" y="190.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable$1.next (192 samples, 7.78%)</title><rect x="244.9" y="163.0" width="91.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.9" y="174.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.getCell (192 samples, 7.78%)</title><rect x="244.9" y="147.0" width="91.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.9" y="158.0">ru/mail/pol..</text>
</g>
<g>
<title>ru.mail.polis.dao.art241111.Cell (8 samples, 0.32%)</title><rect x="244.9" y="131.0" width="3.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="247.9" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.art241111.Value (16 samples, 0.65%)</title><rect x="248.7" y="131.0" width="7.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="251.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.getOffset (52 samples, 2.11%)</title><rect x="256.3" y="131.0" width="24.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="259.3" y="142.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.readOffset (52 samples, 2.11%)</title><rect x="256.3" y="115.0" width="24.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.3" y="126.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (52 samples, 2.11%)</title><rect x="256.3" y="99.0" width="24.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.3" y="110.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (37 samples, 1.50%)</title><rect x="256.3" y="83.0" width="17.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="259.3" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (15 samples, 0.61%)</title><rect x="274.0" y="83.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.0" y="94.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.61%)</title><rect x="274.0" y="67.0" width="7.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="277.0" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.readOffset (116 samples, 4.70%)</title><rect x="281.2" y="131.0" width="55.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="284.2" y="142.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (116 samples, 4.70%)</title><rect x="281.2" y="115.0" width="55.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="284.2" y="126.0">java/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (86 samples, 3.49%)</title><rect x="281.2" y="99.0" width="41.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="284.2" y="110.0">jav..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (30 samples, 1.22%)</title><rect x="322.3" y="99.0" width="14.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="325.3" y="110.0"></text>
</g>
<g>
<title>byte[] (30 samples, 1.22%)</title><rect x="322.3" y="83.0" width="14.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="325.3" y="94.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (28 samples, 1.13%)</title><rect x="336.7" y="195.0" width="13.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="339.7" y="206.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (28 samples, 1.13%)</title><rect x="336.7" y="179.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="339.7" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/Cell.compareTo (28 samples, 1.13%)</title><rect x="336.7" y="163.0" width="13.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="339.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/Cell.compareTo (28 samples, 1.13%)</title><rect x="336.7" y="147.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/Cell.getKey (28 samples, 1.13%)</title><rect x="336.7" y="131.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="339.7" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (28 samples, 1.13%)</title><rect x="336.7" y="115.0" width="13.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="339.7" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (28 samples, 1.13%)</title><rect x="336.7" y="99.0" width="13.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="339.7" y="110.0"></text>
</g>
<g>
<title>java.util.ArrayList (14 samples, 0.57%)</title><rect x="350.1" y="323.0" width="6.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="353.1" y="334.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1,371 samples, 55.57%)</title><rect x="356.8" y="323.0" width="655.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="359.8" y="334.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (13 samples, 0.53%)</title><rect x="356.8" y="307.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="359.8" y="318.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (13 samples, 0.53%)</title><rect x="356.8" y="291.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="359.8" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (13 samples, 0.53%)</title><rect x="356.8" y="275.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.8" y="286.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (13 samples, 0.53%)</title><rect x="356.8" y="259.0" width="6.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="359.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/TurboDAO$$Lambda$67/867270723.accept (1,358 samples, 55.05%)</title><rect x="363.0" y="307.0" width="649.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.0" y="318.0">ru/mail/polis/dao/art241111/TurboDAO$$Lambda$67/867270723.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/TurboDAO.lambda$cellIterator$5 (1,358 samples, 55.05%)</title><rect x="363.0" y="291.0" width="649.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.0" y="302.0">ru/mail/polis/dao/art241111/TurboDAO.lambda$cellIterator$5</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.iterator (1,358 samples, 55.05%)</title><rect x="363.0" y="275.0" width="649.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.0" y="286.0">ru/mail/polis/dao/art241111/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.art241111.SSTable$1 (12 samples, 0.49%)</title><rect x="363.0" y="259.0" width="5.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="366.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable$1.&lt;init&gt; (1,346 samples, 54.56%)</title><rect x="368.7" y="259.0" width="643.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.7" y="270.0">ru/mail/polis/dao/art241111/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.getKeyPosition (1,346 samples, 54.56%)</title><rect x="368.7" y="243.0" width="643.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.7" y="254.0">ru/mail/polis/dao/art241111/SSTable.getKeyPosition</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.getKey (1,346 samples, 54.56%)</title><rect x="368.7" y="227.0" width="643.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="371.7" y="238.0">ru/mail/polis/dao/art241111/SSTable.getKey</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.getOffset (418 samples, 16.94%)</title><rect x="368.7" y="211.0" width="200.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="371.7" y="222.0">ru/mail/polis/dao/art24111..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.readOffset (418 samples, 16.94%)</title><rect x="368.7" y="195.0" width="200.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.7" y="206.0">ru/mail/polis/dao/art24111..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (418 samples, 16.94%)</title><rect x="368.7" y="179.0" width="200.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="371.7" y="190.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (237 samples, 9.61%)</title><rect x="368.7" y="163.0" width="113.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="371.7" y="174.0">java.nio.HeapB..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (181 samples, 7.34%)</title><rect x="482.1" y="163.0" width="86.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.1" y="174.0">java/nio/H..</text>
</g>
<g>
<title>byte[] (181 samples, 7.34%)</title><rect x="482.1" y="147.0" width="86.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="485.1" y="158.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.readOffset (928 samples, 37.62%)</title><rect x="568.7" y="211.0" width="443.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="571.7" y="222.0">ru/mail/polis/dao/art241111/SSTable.readOffset</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (928 samples, 37.62%)</title><rect x="568.7" y="195.0" width="443.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="571.7" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (531 samples, 21.52%)</title><rect x="568.7" y="179.0" width="254.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="571.7" y="190.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (397 samples, 16.09%)</title><rect x="822.7" y="179.0" width="189.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="825.7" y="190.0">java/nio/HeapByteBuffer.&lt;..</text>
</g>
<g>
<title>byte[] (397 samples, 16.09%)</title><rect x="822.7" y="163.0" width="189.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="825.7" y="174.0">byte[]</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.20%)</title><rect x="1012.5" y="323.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1015.5" y="334.0"></text>
</g>
<g>
<title>java.lang.Object[] (5 samples, 0.20%)</title><rect x="1012.5" y="307.0" width="2.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1015.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (177 samples, 7.17%)</title><rect x="1014.9" y="323.0" width="84.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1017.9" y="334.0">ru/mail/po..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (7 samples, 0.28%)</title><rect x="1014.9" y="307.0" width="3.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1017.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (170 samples, 6.89%)</title><rect x="1018.3" y="307.0" width="81.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1021.3" y="318.0">ru/mail/p..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (170 samples, 6.89%)</title><rect x="1018.3" y="291.0" width="81.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1021.3" y="302.0">com/googl..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (170 samples, 6.89%)</title><rect x="1018.3" y="275.0" width="81.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1021.3" y="286.0">java/util..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (170 samples, 6.89%)</title><rect x="1018.3" y="259.0" width="81.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1021.3" y="270.0">java/util..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (170 samples, 6.89%)</title><rect x="1018.3" y="243.0" width="81.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1021.3" y="254.0">java/util..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (170 samples, 6.89%)</title><rect x="1018.3" y="227.0" width="81.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1021.3" y="238.0">java/util..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (170 samples, 6.89%)</title><rect x="1018.3" y="211.0" width="81.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1021.3" y="222.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (170 samples, 6.89%)</title><rect x="1018.3" y="195.0" width="81.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1021.3" y="206.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (155 samples, 6.28%)</title><rect x="1018.3" y="179.0" width="74.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1021.3" y="190.0">com/goog..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable$1.next (155 samples, 6.28%)</title><rect x="1018.3" y="163.0" width="74.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1021.3" y="174.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable$1.next (155 samples, 6.28%)</title><rect x="1018.3" y="147.0" width="74.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1021.3" y="158.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.getCell (155 samples, 6.28%)</title><rect x="1018.3" y="131.0" width="74.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1021.3" y="142.0">ru/mail/..</text>
</g>
<g>
<title>ru.mail.polis.dao.art241111.Cell (9 samples, 0.36%)</title><rect x="1018.3" y="115.0" width="4.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1021.3" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.art241111.Value (7 samples, 0.28%)</title><rect x="1022.6" y="115.0" width="3.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1025.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.getOffset (46 samples, 1.86%)</title><rect x="1025.9" y="115.0" width="22.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1028.9" y="126.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.readOffset (46 samples, 1.86%)</title><rect x="1025.9" y="99.0" width="22.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1028.9" y="110.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (46 samples, 1.86%)</title><rect x="1025.9" y="83.0" width="22.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1028.9" y="94.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (37 samples, 1.50%)</title><rect x="1025.9" y="67.0" width="17.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1028.9" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.36%)</title><rect x="1043.6" y="67.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1046.6" y="78.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.36%)</title><rect x="1043.6" y="51.0" width="4.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1046.6" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/SSTable.readOffset (93 samples, 3.77%)</title><rect x="1047.9" y="115.0" width="44.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1050.9" y="126.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (93 samples, 3.77%)</title><rect x="1047.9" y="99.0" width="44.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1050.9" y="110.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (65 samples, 2.63%)</title><rect x="1047.9" y="83.0" width="31.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1050.9" y="94.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (28 samples, 1.13%)</title><rect x="1079.0" y="83.0" width="13.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1082.0" y="94.0"></text>
</g>
<g>
<title>byte[] (28 samples, 1.13%)</title><rect x="1079.0" y="67.0" width="13.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1082.0" y="78.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (15 samples, 0.61%)</title><rect x="1092.4" y="179.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1095.4" y="190.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (15 samples, 0.61%)</title><rect x="1092.4" y="163.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1095.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/Cell.compareTo (15 samples, 0.61%)</title><rect x="1092.4" y="147.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1095.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/Cell.compareTo (15 samples, 0.61%)</title><rect x="1092.4" y="131.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1095.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/Cell.getKey (15 samples, 0.61%)</title><rect x="1092.4" y="115.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1095.4" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (15 samples, 0.61%)</title><rect x="1092.4" y="99.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1095.4" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (15 samples, 0.61%)</title><rect x="1092.4" y="83.0" width="7.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1095.4" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/art241111/MemTable.iterator (52 samples, 2.11%)</title><rect x="1099.6" y="323.0" width="24.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1102.6" y="334.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (3 samples, 0.12%)</title><rect x="1099.6" y="307.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1102.6" y="318.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (3 samples, 0.12%)</title><rect x="1099.6" y="291.0" width="1.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1102.6" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (20 samples, 0.81%)</title><rect x="1101.0" y="307.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1104.0" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator (20 samples, 0.81%)</title><rect x="1101.0" y="291.0" width="9.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1104.0" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (10 samples, 0.41%)</title><rect x="1110.6" y="307.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1113.6" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (10 samples, 0.41%)</title><rect x="1110.6" y="291.0" width="4.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1113.6" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (19 samples, 0.77%)</title><rect x="1115.4" y="307.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1118.4" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (19 samples, 0.77%)</title><rect x="1115.4" y="291.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1118.4" y="302.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (19 samples, 0.77%)</title><rect x="1115.4" y="275.0" width="9.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1118.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (14 samples, 0.57%)</title><rect x="1124.5" y="419.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1127.5" y="430.0"></text>
</g>
<g>
<title>java/lang/String.substring (14 samples, 0.57%)</title><rect x="1124.5" y="403.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1127.5" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (14 samples, 0.57%)</title><rect x="1124.5" y="387.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1127.5" y="398.0"></text>
</g>
<g>
<title>java.lang.String (9 samples, 0.36%)</title><rect x="1124.5" y="371.0" width="4.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1127.5" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.20%)</title><rect x="1128.8" y="371.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1131.8" y="382.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.20%)</title><rect x="1128.8" y="355.0" width="2.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1131.8" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (81 samples, 3.28%)</title><rect x="1131.2" y="451.0" width="38.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1134.2" y="462.0">one..</text>
</g>
<g>
<title>one.nio.http.Request (13 samples, 0.53%)</title><rect x="1131.2" y="435.0" width="6.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1134.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (22 samples, 0.89%)</title><rect x="1137.4" y="435.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1140.4" y="446.0"></text>
</g>
<g>
<title>java.lang.String[] (22 samples, 0.89%)</title><rect x="1137.4" y="419.0" width="10.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1140.4" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (46 samples, 1.86%)</title><rect x="1147.9" y="435.0" width="22.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1150.9" y="446.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (46 samples, 1.86%)</title><rect x="1147.9" y="419.0" width="22.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1150.9" y="430.0">o..</text>
</g>
<g>
<title>char[] (22 samples, 0.89%)</title><rect x="1147.9" y="403.0" width="10.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1150.9" y="414.0"></text>
</g>
<g>
<title>java.lang.String (8 samples, 0.32%)</title><rect x="1158.4" y="403.0" width="3.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1161.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.65%)</title><rect x="1162.3" y="403.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1165.3" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.65%)</title><rect x="1162.3" y="387.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1165.3" y="398.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (16 samples, 0.65%)</title><rect x="1162.3" y="371.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1165.3" y="382.0"></text>
</g>
<g>
<title>byte[] (16 samples, 0.65%)</title><rect x="1162.3" y="355.0" width="7.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1165.3" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (42 samples, 1.70%)</title><rect x="1169.9" y="451.0" width="20.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1172.9" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (42 samples, 1.70%)</title><rect x="1169.9" y="435.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1172.9" y="446.0"></text>
</g>
<g>
<title>char[] (21 samples, 0.85%)</title><rect x="1169.9" y="419.0" width="10.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1172.9" y="430.0"></text>
</g>
<g>
<title>java.lang.String (5 samples, 0.20%)</title><rect x="1180.0" y="419.0" width="2.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1183.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.65%)</title><rect x="1182.3" y="419.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1185.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.65%)</title><rect x="1182.3" y="403.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1185.3" y="414.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (16 samples, 0.65%)</title><rect x="1182.3" y="387.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>byte[] (16 samples, 0.65%)</title><rect x="1182.3" y="371.0" width="7.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1185.3" y="382.0"></text>
</g>
</g>
</svg>
